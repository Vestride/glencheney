{"version":3,"sources":["webpack:///./src/templates/project.jsx"],"names":["Project","data","pageContext","location","post","markdownRemark","hero","fluid","sizes","heroImageAbsoluteUrl","site","siteMetadata","url","src","description","frontmatter","shortDescription","title","name","content","property","className","cx","styles","alt","imageDescription","target","rel","textOverflow","href","tags","map","tag","key","markdown","dangerouslySetInnerHTML","__html","html","to","nextProject","fields","slug","query"],"mappings":"2FAAA,yKA4FeA,UAlFC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9BC,EAAOH,EAAKI,eAClBJ,EAAKK,KAAKC,MAAMC,MAAQ,6DACxB,IAAMC,EAAuBR,EAAKS,KAAKC,aAAaC,IAAMX,EAAKK,KAAKC,MAAMM,IACpEC,EAAcV,EAAKW,YAAYC,iBAC/BC,EAAWhB,EAAKS,KAAKC,aAAaM,MAA7B,eACX,OACE,kBAAC,IAAD,CAAQd,SAAUA,GAChB,kBAAC,IAAD,KACE,+BAAQc,GACR,0BAAMC,KAAK,cAAcC,QAASL,IAGlC,0BAAMM,SAAS,UAAUD,QAAQ,YACjC,0BAAMC,SAAS,WAAWD,QAASF,IACnC,0BAAMG,SAAS,iBAAiBD,QAASL,IACzC,0BAAMM,SAAS,WAAWD,QAASV,IACnC,0BAAMW,SAAS,iBAAiBD,QAAS,OACzC,0BAAMC,SAAS,kBAAkBD,QAAS,MAG1C,0BAAMD,KAAK,gBAAgBC,QAASF,IACpC,0BAAMC,KAAK,sBAAsBC,QAASL,IAC1C,0BAAMI,KAAK,gBAAgBC,QAASV,KAEtC,yBAAKY,UAAU,qBACf,6BAASA,UAAU,oBACjB,yBAAKA,UAAU,gDACb,kBAAC,IAAD,CAAKA,UAAWC,YAAG,SAAUC,IAAOjB,MAAOkB,IAAKpB,EAAKW,YAAYU,iBAAkBjB,MAAOP,EAAKK,KAAKC,SAEtG,yBAAKc,UAAU,aACb,yBAAKA,UAAU,YACb,uBAAGA,UAAU,cAAb,OACA,uBAAGK,OAAO,SAASC,IAAI,sBAAsBN,UAAWE,IAAOK,aAAcC,KAAMzB,EAAKW,YAAYc,MACjGzB,EAAKW,YAAYc,MAEpB,uBAAGR,UAAU,cAAb,QACA,uBAAGA,UAAWE,IAAOO,MAClB1B,EAAKW,YAAYe,KAAKC,KAAI,SAAAC,GAAG,OAC5B,0BAAMC,IAAKD,EAAKX,UAAWE,IAAOS,KAC/BA,QAKT,yBAAKX,UAAU,2BACb,wBAAIA,UAAU,iBAAiBjB,EAAKW,YAAYE,OAChD,yBAAKI,UAAWC,YAAGC,IAAOW,SAAU,gBAAiBC,wBAAyB,CAAEC,OAAQhC,EAAKiC,WAInG,yBAAKhB,UAAU,8BACb,yBAAKA,UAAU,sBACb,6BACA,yBAAKA,UAAU,qBACf,uBAAGA,UAAU,cAAb,gBACA,kBAAC,OAAD,CAAMiB,GAAIpC,EAAYqC,YAAYC,OAAOC,MACvC,wBAAIpB,UAAU,iBAAiBnB,EAAYqC,YAAYxB,YAAYE,YA2BxE,IAAMyB,EAAK","file":"component---src-templates-project-jsx-0d4fccc26e232b4d143c.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport Helmet from 'react-helmet';\nimport cx from 'clsx';\nimport Layout from '../components/layout';\n\nimport styles from './project.module.css';\n\nconst Project = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  data.hero.fluid.sizes = '(min-width: 1629px) 1400px, (min-width: 768px) 86vw, 100vw';\n  const heroImageAbsoluteUrl = data.site.siteMetadata.url + data.hero.fluid.src;\n  const description = post.frontmatter.shortDescription;\n  const title = `${data.site.siteMetadata.title} Â· Portfolio`;\n  return (\n    <Layout location={location}>\n      <Helmet>\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n\n        {/* Open Graph tags */}\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={heroImageAbsoluteUrl} />\n        <meta property=\"og:image:width\" content={1400} />\n        <meta property=\"og:image:height\" content={788} />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={heroImageAbsoluteUrl} />\n      </Helmet>\n      <div className=\"spacer-btm-large\"></div>\n      <article className=\"spacer-btm-large\">\n        <div className=\"container container-full@xs spacer-btm-large\">\n          <Img className={cx('col-12', styles.hero)} alt={post.frontmatter.imageDescription} sizes={data.hero.fluid} />\n        </div>\n        <div className=\"container\">\n          <div className=\"col-3@sm\">\n            <p className=\"type-label\">URL</p>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" className={styles.textOverflow} href={post.frontmatter.href}>\n              {post.frontmatter.href}\n            </a>\n            <p className=\"type-label\">Tags</p>\n            <p className={styles.tags}>\n              {post.frontmatter.tags.map(tag => (\n                <span key={tag} className={styles.tag}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          </div>\n          <div className=\"col-8@sm col-start-4@sm\">\n            <h1 className=\"type-header-2\">{post.frontmatter.title}</h1>\n            <div className={cx(styles.markdown, 'no-min-width')} dangerouslySetInnerHTML={{ __html: post.html }} />\n          </div>\n        </div>\n      </article>\n      <div className=\"container spacer-btm-large\">\n        <div className=\"col-10 col-start-2\">\n          <hr />\n          <div className=\"spacer-btm-large\"></div>\n          <p className=\"type-label\">Next project</p>\n          <Link to={pageContext.nextProject.fields.slug}>\n            <h2 className=\"type-header-2\">{pageContext.nextProject.frontmatter.title}</h2>\n          </Link>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nProject.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      html: PropTypes.string.isRequired,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        imageDescription: PropTypes.string.isRequired,\n        href: PropTypes.string.isRequired,\n        tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n      }).isRequired,\n    }).isRequired,\n    hero: PropTypes.shape({\n      fluid: PropTypes.object.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default Project;\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!, $heroImage: String!) {\n    site {\n      siteMetadata {\n        title\n        url\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        imageDescription\n        shortDescription\n        href\n        tags\n      }\n    }\n    hero: imageSharp(fluid: { originalName: { eq: $heroImage } }) {\n      fluid(maxWidth: 1400) {\n        ...GatsbyImageSharpFluid_withWebp\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}